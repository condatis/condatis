# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/econetui.ui'
#
# Created: Mon Jan 12 18:11:06 2015
#      by: PyQt4 UI code generator 4.10.4-snapshot-595c1453ae29
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(1142, 658)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.verticalLayout_3 = QtGui.QVBoxLayout()
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        self.mainfig = MplWidget(self.centralwidget)
        self.mainfig.setMinimumSize(QtCore.QSize(600, 0))
        self.mainfig.setObjectName(_fromUtf8("mainfig"))
        self.verticalLayout_3.addWidget(self.mainfig)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1142, 22))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName(_fromUtf8("menuView"))
        self.menuComponents = QtGui.QMenu(self.menuView)
        self.menuComponents.setObjectName(_fromUtf8("menuComponents"))
        self.menuCalculate = QtGui.QMenu(self.menubar)
        self.menuCalculate.setObjectName(_fromUtf8("menuCalculate"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuApp = QtGui.QMenu(self.menubar)
        self.menuApp.setObjectName(_fromUtf8("menuApp"))
        self.menuExport_2 = QtGui.QMenu(self.menubar)
        self.menuExport_2.setObjectName(_fromUtf8("menuExport_2"))
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName(_fromUtf8("menuEdit"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar_2 = QtGui.QToolBar(MainWindow)
        self.toolBar_2.setObjectName(_fromUtf8("toolBar_2"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        self.toolBar_3 = QtGui.QToolBar(MainWindow)
        self.toolBar_3.setObjectName(_fromUtf8("toolBar_3"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_3)
        MainWindow.insertToolBarBreak(self.toolBar_3)
        self.dockWidget = QtGui.QDockWidget(MainWindow)
        self.dockWidget.setObjectName(_fromUtf8("dockWidget"))
        self.dockWidgetContents = QtGui.QWidget()
        self.dockWidgetContents.setObjectName(_fromUtf8("dockWidgetContents"))
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_4.setObjectName(_fromUtf8("verticalLayout_4"))
        self.label = QtGui.QLabel(self.dockWidgetContents)
        self.label.setObjectName(_fromUtf8("label"))
        self.verticalLayout_4.addWidget(self.label)
        self.listWidget = QtGui.QListWidget(self.dockWidgetContents)
        self.listWidget.setObjectName(_fromUtf8("listWidget"))
        self.verticalLayout_4.addWidget(self.listWidget)
        self.tabWidget = QtGui.QTabWidget(self.dockWidgetContents)
        self.tabWidget.setObjectName(_fromUtf8("tabWidget"))
        self.tab_3 = QtGui.QWidget()
        self.tab_3.setObjectName(_fromUtf8("tab_3"))
        self.gridLayout_2 = QtGui.QGridLayout(self.tab_3)
        self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
        self.label_12 = QtGui.QLabel(self.tab_3)
        self.label_12.setObjectName(_fromUtf8("label_12"))
        self.gridLayout_2.addWidget(self.label_12, 6, 0, 1, 1)
        self.label_17 = QtGui.QLabel(self.tab_3)
        self.label_17.setObjectName(_fromUtf8("label_17"))
        self.gridLayout_2.addWidget(self.label_17, 7, 0, 1, 1)
        self.originYSpinBox = QtGui.QDoubleSpinBox(self.tab_3)
        self.originYSpinBox.setReadOnly(True)
        self.originYSpinBox.setDecimals(4)
        self.originYSpinBox.setMinimum(-999999999.0)
        self.originYSpinBox.setMaximum(999999999.99)
        self.originYSpinBox.setProperty("value", 0.0)
        self.originYSpinBox.setObjectName(_fromUtf8("originYSpinBox"))
        self.gridLayout_2.addWidget(self.originYSpinBox, 5, 1, 1, 1)
        self.label_13 = QtGui.QLabel(self.tab_3)
        self.label_13.setObjectName(_fromUtf8("label_13"))
        self.gridLayout_2.addWidget(self.label_13, 3, 0, 1, 1)
        self.label_14 = QtGui.QLabel(self.tab_3)
        self.label_14.setObjectName(_fromUtf8("label_14"))
        self.gridLayout_2.addWidget(self.label_14, 0, 0, 1, 1)
        self.originXSpinBox = QtGui.QDoubleSpinBox(self.tab_3)
        self.originXSpinBox.setReadOnly(True)
        self.originXSpinBox.setSuffix(_fromUtf8(""))
        self.originXSpinBox.setDecimals(4)
        self.originXSpinBox.setMinimum(-999999999.0)
        self.originXSpinBox.setMaximum(999999999.0)
        self.originXSpinBox.setProperty("value", 0.0)
        self.originXSpinBox.setObjectName(_fromUtf8("originXSpinBox"))
        self.gridLayout_2.addWidget(self.originXSpinBox, 4, 1, 1, 1)
        self.hGridSizeSpinBox = QtGui.QSpinBox(self.tab_3)
        self.hGridSizeSpinBox.setReadOnly(True)
        self.hGridSizeSpinBox.setMaximum(999999999)
        self.hGridSizeSpinBox.setObjectName(_fromUtf8("hGridSizeSpinBox"))
        self.gridLayout_2.addWidget(self.hGridSizeSpinBox, 1, 1, 1, 1)
        self.cellSizeYSpinBox = QtGui.QDoubleSpinBox(self.tab_3)
        self.cellSizeYSpinBox.setReadOnly(True)
        self.cellSizeYSpinBox.setDecimals(4)
        self.cellSizeYSpinBox.setMinimum(-1000000000.0)
        self.cellSizeYSpinBox.setMaximum(999999999.99)
        self.cellSizeYSpinBox.setObjectName(_fromUtf8("cellSizeYSpinBox"))
        self.gridLayout_2.addWidget(self.cellSizeYSpinBox, 7, 1, 1, 1)
        self.label_15 = QtGui.QLabel(self.tab_3)
        self.label_15.setObjectName(_fromUtf8("label_15"))
        self.gridLayout_2.addWidget(self.label_15, 1, 0, 1, 1)
        self.label_16 = QtGui.QLabel(self.tab_3)
        self.label_16.setObjectName(_fromUtf8("label_16"))
        self.gridLayout_2.addWidget(self.label_16, 2, 0, 1, 1)
        self.label_23 = QtGui.QLabel(self.tab_3)
        self.label_23.setObjectName(_fromUtf8("label_23"))
        self.gridLayout_2.addWidget(self.label_23, 4, 0, 1, 1)
        self.vGridSizeSpinBox = QtGui.QSpinBox(self.tab_3)
        self.vGridSizeSpinBox.setReadOnly(True)
        self.vGridSizeSpinBox.setMaximum(999999999)
        self.vGridSizeSpinBox.setObjectName(_fromUtf8("vGridSizeSpinBox"))
        self.gridLayout_2.addWidget(self.vGridSizeSpinBox, 2, 1, 1, 1)
        self.habitatAreaSpinBox = QtGui.QDoubleSpinBox(self.tab_3)
        self.habitatAreaSpinBox.setReadOnly(True)
        self.habitatAreaSpinBox.setSuffix(_fromUtf8(""))
        self.habitatAreaSpinBox.setMaximum(999999999.99)
        self.habitatAreaSpinBox.setObjectName(_fromUtf8("habitatAreaSpinBox"))
        self.gridLayout_2.addWidget(self.habitatAreaSpinBox, 3, 1, 1, 1)
        self.label_8 = QtGui.QLabel(self.tab_3)
        self.label_8.setObjectName(_fromUtf8("label_8"))
        self.gridLayout_2.addWidget(self.label_8, 5, 0, 1, 1)
        self.nCellsSpinBox = QtGui.QSpinBox(self.tab_3)
        self.nCellsSpinBox.setReadOnly(True)
        self.nCellsSpinBox.setMaximum(999999999)
        self.nCellsSpinBox.setObjectName(_fromUtf8("nCellsSpinBox"))
        self.gridLayout_2.addWidget(self.nCellsSpinBox, 0, 1, 1, 1)
        self.cellSizeXSpinBox = QtGui.QDoubleSpinBox(self.tab_3)
        self.cellSizeXSpinBox.setReadOnly(True)
        self.cellSizeXSpinBox.setDecimals(4)
        self.cellSizeXSpinBox.setMinimum(-999999999.0)
        self.cellSizeXSpinBox.setMaximum(999999999.99)
        self.cellSizeXSpinBox.setObjectName(_fromUtf8("cellSizeXSpinBox"))
        self.gridLayout_2.addWidget(self.cellSizeXSpinBox, 6, 1, 1, 1)
        self.tabWidget.addTab(self.tab_3, _fromUtf8(""))
        self.tab = QtGui.QWidget()
        self.tab.setObjectName(_fromUtf8("tab"))
        self.gridLayout = QtGui.QGridLayout(self.tab)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.groupBox = QtGui.QGroupBox(self.tab)
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.gridLayout_4 = QtGui.QGridLayout(self.groupBox)
        self.gridLayout_4.setObjectName(_fromUtf8("gridLayout_4"))
        self.dispersalSpinBox = QtGui.QDoubleSpinBox(self.groupBox)
        self.dispersalSpinBox.setDecimals(9)
        self.dispersalSpinBox.setMaximum(1000000000.0)
        self.dispersalSpinBox.setProperty("value", 4.0)
        self.dispersalSpinBox.setObjectName(_fromUtf8("dispersalSpinBox"))
        self.gridLayout_4.addWidget(self.dispersalSpinBox, 0, 2, 1, 1)
        self.label_2 = QtGui.QLabel(self.groupBox)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.gridLayout_4.addWidget(self.label_2, 0, 1, 1, 1)
        self.rSpinBox = QtGui.QDoubleSpinBox(self.groupBox)
        self.rSpinBox.setMaximum(1000000000.0)
        self.rSpinBox.setProperty("value", 100.0)
        self.rSpinBox.setObjectName(_fromUtf8("rSpinBox"))
        self.gridLayout_4.addWidget(self.rSpinBox, 1, 2, 1, 1)
        self.label_3 = QtGui.QLabel(self.groupBox)
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.gridLayout_4.addWidget(self.label_3, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.groupBox, 1, 0, 1, 1)
        self.groupBox_2 = QtGui.QGroupBox(self.tab)
        self.groupBox_2.setObjectName(_fromUtf8("groupBox_2"))
        self.gridLayout_5 = QtGui.QGridLayout(self.groupBox_2)
        self.gridLayout_5.setObjectName(_fromUtf8("gridLayout_5"))
        self.cumPowerSpinBox = QtGui.QDoubleSpinBox(self.groupBox_2)
        self.cumPowerSpinBox.setDecimals(4)
        self.cumPowerSpinBox.setMaximum(100.0)
        self.cumPowerSpinBox.setProperty("value", 50.0)
        self.cumPowerSpinBox.setObjectName(_fromUtf8("cumPowerSpinBox"))
        self.gridLayout_5.addWidget(self.cumPowerSpinBox, 1, 1, 1, 1)
        self.cumGoButton = QtGui.QPushButton(self.groupBox_2)
        self.cumGoButton.setMaximumSize(QtCore.QSize(30, 16777215))
        self.cumGoButton.setObjectName(_fromUtf8("cumGoButton"))
        self.gridLayout_5.addWidget(self.cumGoButton, 1, 2, 1, 1)
        self.label_6 = QtGui.QLabel(self.groupBox_2)
        self.label_6.setObjectName(_fromUtf8("label_6"))
        self.gridLayout_5.addWidget(self.label_6, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.groupBox_2, 2, 0, 1, 1)
        self.tabWidget.addTab(self.tab, _fromUtf8(""))
        self.tab_2 = QtGui.QWidget()
        self.tab_2.setObjectName(_fromUtf8("tab_2"))
        self.gridLayout_3 = QtGui.QGridLayout(self.tab_2)
        self.gridLayout_3.setObjectName(_fromUtf8("gridLayout_3"))
        self.label_9 = QtGui.QLabel(self.tab_2)
        self.label_9.setObjectName(_fromUtf8("label_9"))
        self.gridLayout_3.addWidget(self.label_9, 2, 0, 1, 1)
        self.label_7 = QtGui.QLabel(self.tab_2)
        self.label_7.setText(_fromUtf8(""))
        self.label_7.setObjectName(_fromUtf8("label_7"))
        self.gridLayout_3.addWidget(self.label_7, 0, 2, 1, 1)
        self.label_10 = QtGui.QLabel(self.tab_2)
        self.label_10.setObjectName(_fromUtf8("label_10"))
        self.gridLayout_3.addWidget(self.label_10, 3, 0, 1, 1)
        self.label_5 = QtGui.QLabel(self.tab_2)
        self.label_5.setObjectName(_fromUtf8("label_5"))
        self.gridLayout_3.addWidget(self.label_5, 1, 0, 1, 1)
        self.label_4 = QtGui.QLabel(self.tab_2)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.gridLayout_3.addWidget(self.label_4, 0, 0, 1, 1)
        self.lineEdit_1 = QtGui.QLineEdit(self.tab_2)
        self.lineEdit_1.setMinimumSize(QtCore.QSize(70, 0))
        self.lineEdit_1.setStatusTip(_fromUtf8(""))
        self.lineEdit_1.setReadOnly(True)
        self.lineEdit_1.setObjectName(_fromUtf8("lineEdit_1"))
        self.gridLayout_3.addWidget(self.lineEdit_1, 0, 1, 1, 1)
        self.lineEdit_2 = QtGui.QLineEdit(self.tab_2)
        self.lineEdit_2.setToolTip(_fromUtf8(""))
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName(_fromUtf8("lineEdit_2"))
        self.gridLayout_3.addWidget(self.lineEdit_2, 1, 1, 1, 1)
        self.lineEdit_4 = QtGui.QLineEdit(self.tab_2)
        self.lineEdit_4.setReadOnly(True)
        self.lineEdit_4.setObjectName(_fromUtf8("lineEdit_4"))
        self.gridLayout_3.addWidget(self.lineEdit_4, 3, 1, 1, 1)
        self.lineEdit_3 = QtGui.QLineEdit(self.tab_2)
        self.lineEdit_3.setStatusTip(_fromUtf8(""))
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName(_fromUtf8("lineEdit_3"))
        self.gridLayout_3.addWidget(self.lineEdit_3, 2, 1, 1, 1)
        self.tabWidget.addTab(self.tab_2, _fromUtf8(""))
        self.verticalLayout_4.addWidget(self.tabWidget)
        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.dockWidget_2 = QtGui.QDockWidget(MainWindow)
        self.dockWidget_2.setMinimumSize(QtCore.QSize(150, 120))
        self.dockWidget_2.setObjectName(_fromUtf8("dockWidget_2"))
        self.dockWidgetContents_2 = QtGui.QWidget()
        self.dockWidgetContents_2.setObjectName(_fromUtf8("dockWidgetContents_2"))
        self.verticalLayout = QtGui.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.subfig1 = MplSubWidget(self.dockWidgetContents_2)
        self.subfig1.setObjectName(_fromUtf8("subfig1"))
        self.verticalLayout.addWidget(self.subfig1)
        self.subfig2 = MplSubWidget(self.dockWidgetContents_2)
        self.subfig2.setObjectName(_fromUtf8("subfig2"))
        self.verticalLayout.addWidget(self.subfig2)
        self.subfig3 = MplSubWidget(self.dockWidgetContents_2)
        self.subfig3.setObjectName(_fromUtf8("subfig3"))
        self.verticalLayout.addWidget(self.subfig3)
        self.subfig4 = MplSubWidget(self.dockWidgetContents_2)
        self.subfig4.setObjectName(_fromUtf8("subfig4"))
        self.verticalLayout.addWidget(self.subfig4)
        self.dockWidget_2.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_2)
        self.toolBar = QtGui.QToolBar(MainWindow)
        self.toolBar.setEnabled(True)
        self.toolBar.setWhatsThis(_fromUtf8(""))
        self.toolBar.setObjectName(_fromUtf8("toolBar"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_4 = QtGui.QToolBar(MainWindow)
        self.toolBar_4.setObjectName(_fromUtf8("toolBar_4"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_4)
        self.toolBar_5 = QtGui.QToolBar(MainWindow)
        self.toolBar_5.setObjectName(_fromUtf8("toolBar_5"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_5)
        self.actionNew = QtGui.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Document.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Document.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionNew.setIcon(icon)
        self.actionNew.setObjectName(_fromUtf8("actionNew"))
        self.actionOpen = QtGui.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/open-file-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/open-file-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionOpen.setIcon(icon1)
        self.actionOpen.setObjectName(_fromUtf8("actionOpen"))
        self.actionSave = QtGui.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Save-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Export To Document.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionSave.setIcon(icon2)
        self.actionSave.setObjectName(_fromUtf8("actionSave"))
        self.actionSave_As = QtGui.QAction(MainWindow)
        self.actionSave_As.setObjectName(_fromUtf8("actionSave_As"))
        self.actionPrint = QtGui.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Printer-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPrint.setIcon(icon3)
        self.actionPrint.setObjectName(_fromUtf8("actionPrint"))
        self.actionSave_Image = QtGui.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Images-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Images-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionSave_Image.setIcon(icon4)
        self.actionSave_Image.setObjectName(_fromUtf8("actionSave_Image"))
        self.actionClose = QtGui.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/delete-file-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClose.setIcon(icon5)
        self.actionClose.setObjectName(_fromUtf8("actionClose"))
        self.actionView_Map = QtGui.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/orbz-nature-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/orbz-nature-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionView_Map.setIcon(icon6)
        self.actionView_Map.setObjectName(_fromUtf8("actionView_Map"))
        self.actionView_Voltage = QtGui.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Battery-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Battery-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionView_Voltage.setIcon(icon7)
        self.actionView_Voltage.setObjectName(_fromUtf8("actionView_Voltage"))
        self.actionView_Power = QtGui.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/battery-power-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Battery-icon2.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionView_Power.setIcon(icon8)
        self.actionView_Power.setObjectName(_fromUtf8("actionView_Power"))
        self.actionConductance = QtGui.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Industry-Resistor-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Network-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionConductance.setIcon(icon9)
        self.actionConductance.setObjectName(_fromUtf8("actionConductance"))
        self.actionForward_Optimise = QtGui.QAction(MainWindow)
        self.actionForward_Optimise.setCheckable(True)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Button-Next-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Button-Next-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionForward_Optimise.setIcon(icon10)
        self.actionForward_Optimise.setObjectName(_fromUtf8("actionForward_Optimise"))
        self.actionBackwards_Improvement = QtGui.QAction(MainWindow)
        self.actionBackwards_Improvement.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Button-Previous-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/Button-Previous-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionBackwards_Improvement.setIcon(icon11)
        self.actionBackwards_Improvement.setObjectName(_fromUtf8("actionBackwards_Improvement"))
        self.actionViability = QtGui.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/graph-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8("../../tables14/econet/icons/graph-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionViability.setIcon(icon12)
        self.actionViability.setObjectName(_fromUtf8("actionViability"))
        self.actionShow_subplots = QtGui.QAction(MainWindow)
        self.actionShow_subplots.setCheckable(True)
        self.actionShow_subplots.setObjectName(_fromUtf8("actionShow_subplots"))
        self.actionShow_history_and_controls = QtGui.QAction(MainWindow)
        self.actionShow_history_and_controls.setObjectName(_fromUtf8("actionShow_history_and_controls"))
        self.actionOpen_Habitat = QtGui.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/System-Map-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_Habitat.setIcon(icon13)
        self.actionOpen_Habitat.setObjectName(_fromUtf8("actionOpen_Habitat"))
        self.actionShow_Plot_navigation_bar = QtGui.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Zoom-In-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShow_Plot_navigation_bar.setIcon(icon14)
        self.actionShow_Plot_navigation_bar.setObjectName(_fromUtf8("actionShow_Plot_navigation_bar"))
        self.actionHide_plot_navigation_bar = QtGui.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Zoom-Out-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHide_plot_navigation_bar.setIcon(icon15)
        self.actionHide_plot_navigation_bar.setObjectName(_fromUtf8("actionHide_plot_navigation_bar"))
        self.actionDuplicate_Scenario = QtGui.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/copy-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDuplicate_Scenario.setIcon(icon16)
        self.actionDuplicate_Scenario.setObjectName(_fromUtf8("actionDuplicate_Scenario"))
        self.actionDelete_From_Scenarios = QtGui.QAction(MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Folder-Delete-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDelete_From_Scenarios.setIcon(icon17)
        self.actionDelete_From_Scenarios.setObjectName(_fromUtf8("actionDelete_From_Scenarios"))
        self.actionAdd_Source_Sink = QtGui.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Filesystem-pipe-tap-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Source_Sink.setIcon(icon18)
        self.actionAdd_Source_Sink.setObjectName(_fromUtf8("actionAdd_Source_Sink"))
        self.actionComparison_View = QtGui.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/graph-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionComparison_View.setIcon(icon19)
        self.actionComparison_View.setObjectName(_fromUtf8("actionComparison_View"))
        self.actionCalculate_All = QtGui.QAction(MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/calc_all.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCalculate_All.setIcon(icon20)
        self.actionCalculate_All.setObjectName(_fromUtf8("actionCalculate_All"))
        self.actionView_Population = QtGui.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/rubberring.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionView_Population.setIcon(icon21)
        self.actionView_Population.setObjectName(_fromUtf8("actionView_Population"))
        self.actionCalculate_Metrics = QtGui.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/redcross.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCalculate_Metrics.setIcon(icon22)
        self.actionCalculate_Metrics.setObjectName(_fromUtf8("actionCalculate_Metrics"))
        self.actionScenario_Data = QtGui.QAction(MainWindow)
        self.actionScenario_Data.setObjectName(_fromUtf8("actionScenario_Data"))
        self.actionProject_Data = QtGui.QAction(MainWindow)
        self.actionProject_Data.setObjectName(_fromUtf8("actionProject_Data"))
        self.actionCurrent_Map = QtGui.QAction(MainWindow)
        self.actionCurrent_Map.setObjectName(_fromUtf8("actionCurrent_Map"))
        self.actionToggle_Navbar = QtGui.QAction(MainWindow)
        self.actionToggle_Navbar.setCheckable(True)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Tools-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionToggle_Navbar.setIcon(icon23)
        self.actionToggle_Navbar.setObjectName(_fromUtf8("actionToggle_Navbar"))
        self.actionToggle_Subplots = QtGui.QAction(MainWindow)
        self.actionToggle_Subplots.setCheckable(True)
        self.actionToggle_Subplots.setChecked(True)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Actions-office-chart-line-stacked-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionToggle_Subplots.setIcon(icon24)
        self.actionToggle_Subplots.setObjectName(_fromUtf8("actionToggle_Subplots"))
        self.actionToggle_Sidebar = QtGui.QAction(MainWindow)
        self.actionToggle_Sidebar.setCheckable(True)
        self.actionToggle_Sidebar.setChecked(True)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Actions-view-list-tree-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionToggle_Sidebar.setIcon(icon25)
        self.actionToggle_Sidebar.setObjectName(_fromUtf8("actionToggle_Sidebar"))
        self.actionSmoothing = QtGui.QAction(MainWindow)
        self.actionSmoothing.setCheckable(True)
        self.actionSmoothing.setChecked(False)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/terraindc.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSmoothing.setIcon(icon26)
        self.actionSmoothing.setObjectName(_fromUtf8("actionSmoothing"))
        self.actionDropped_Habitat = QtGui.QAction(MainWindow)
        self.actionDropped_Habitat.setObjectName(_fromUtf8("actionDropped_Habitat"))
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionEconets_Help = QtGui.QAction(MainWindow)
        self.actionEconets_Help.setObjectName(_fromUtf8("actionEconets_Help"))
        self.actionCurrent_Tasnk_Help = QtGui.QAction(MainWindow)
        self.actionCurrent_Tasnk_Help.setObjectName(_fromUtf8("actionCurrent_Tasnk_Help"))
        self.actionWhats_This = QtGui.QAction(MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Button-Help-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionWhats_This.setIcon(icon27)
        self.actionWhats_This.setObjectName(_fromUtf8("actionWhats_This"))
        self.actionHelp_Browser = QtGui.QAction(MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/book-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHelp_Browser.setIcon(icon28)
        self.actionHelp_Browser.setObjectName(_fromUtf8("actionHelp_Browser"))
        self.actionManual = QtGui.QAction(MainWindow)
        self.actionManual.setCheckable(True)
        self.actionManual.setIcon(icon28)
        self.actionManual.setObjectName(_fromUtf8("actionManual"))
        self.actionRename_Scenario = QtGui.QAction(MainWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Folder-Open-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRename_Scenario.setIcon(icon29)
        self.actionRename_Scenario.setObjectName(_fromUtf8("actionRename_Scenario"))
        self.actionVoltage_Map = QtGui.QAction(MainWindow)
        self.actionVoltage_Map.setObjectName(_fromUtf8("actionVoltage_Map"))
        self.actionVoltage_Layers_Map = QtGui.QAction(MainWindow)
        self.actionVoltage_Layers_Map.setObjectName(_fromUtf8("actionVoltage_Layers_Map"))
        self.actionCurrent_Map_2 = QtGui.QAction(MainWindow)
        self.actionCurrent_Map_2.setObjectName(_fromUtf8("actionCurrent_Map_2"))
        self.actionFlow_Map = QtGui.QAction(MainWindow)
        self.actionFlow_Map.setObjectName(_fromUtf8("actionFlow_Map"))
        self.actionCalc_Power = QtGui.QAction(MainWindow)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/uknarrow.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCalc_Power.setIcon(icon30)
        self.actionCalc_Power.setObjectName(_fromUtf8("actionCalc_Power"))
        self.actionDropping_Filter = QtGui.QAction(MainWindow)
        self.actionDropping_Filter.setCheckable(True)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Actions-view-filter-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDropping_Filter.setIcon(icon31)
        self.actionDropping_Filter.setObjectName(_fromUtf8("actionDropping_Filter"))
        self.actionDropping_View = QtGui.QAction(MainWindow)
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/drop-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDropping_View.setIcon(icon32)
        self.actionDropping_View.setObjectName(_fromUtf8("actionDropping_View"))
        self.actionDropped_Habitat_2 = QtGui.QAction(MainWindow)
        self.actionDropped_Habitat_2.setObjectName(_fromUtf8("actionDropped_Habitat_2"))
        self.actionDropping_Map = QtGui.QAction(MainWindow)
        self.actionDropping_Map.setObjectName(_fromUtf8("actionDropping_Map"))
        self.actionClose_2 = QtGui.QAction(MainWindow)
        self.actionClose_2.setObjectName(_fromUtf8("actionClose_2"))
        self.actionClose_App = QtGui.QAction(MainWindow)
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Actions-process-stop-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClose_App.setIcon(icon33)
        self.actionClose_App.setObjectName(_fromUtf8("actionClose_App"))
        self.actionSettings = QtGui.QAction(MainWindow)
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/Developer-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSettings.setIcon(icon34)
        self.actionSettings.setObjectName(_fromUtf8("actionSettings"))
        self.actionSource_Map = QtGui.QAction(MainWindow)
        self.actionSource_Map.setObjectName(_fromUtf8("actionSource_Map"))
        self.actionSink_Map = QtGui.QAction(MainWindow)
        self.actionSink_Map.setObjectName(_fromUtf8("actionSink_Map"))
        self.actionDropping_Data = QtGui.QAction(MainWindow)
        self.actionDropping_Data.setObjectName(_fromUtf8("actionDropping_Data"))
        self.actionPoint = QtGui.QAction(MainWindow)
        self.actionPoint.setCheckable(True)
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/point-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPoint.setIcon(icon35)
        self.actionPoint.setObjectName(_fromUtf8("actionPoint"))
        self.actionHabitat_Map = QtGui.QAction(MainWindow)
        self.actionHabitat_Map.setObjectName(_fromUtf8("actionHabitat_Map"))
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionOpen_Habitat)
        self.menuFile.addAction(self.actionAdd_Source_Sink)
        self.menuFile.addAction(self.actionDuplicate_Scenario)
        self.menuFile.addAction(self.actionDelete_From_Scenarios)
        self.menuFile.addAction(self.actionRename_Scenario)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionAbout)
        self.menuComponents.addAction(self.actionToggle_Navbar)
        self.menuComponents.addAction(self.actionToggle_Subplots)
        self.menuComponents.addAction(self.actionToggle_Sidebar)
        self.menuView.addAction(self.actionView_Map)
        self.menuView.addAction(self.actionView_Voltage)
        self.menuView.addAction(self.actionView_Power)
        self.menuView.addAction(self.actionView_Population)
        self.menuView.addAction(self.actionComparison_View)
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuComponents.menuAction())
        self.menuView.addAction(self.actionSmoothing)
        self.menuView.addAction(self.actionDropping_View)
        self.menuCalculate.addAction(self.actionConductance)
        self.menuCalculate.addAction(self.actionCalc_Power)
        self.menuCalculate.addAction(self.actionCalculate_Metrics)
        self.menuCalculate.addAction(self.actionForward_Optimise)
        self.menuCalculate.addAction(self.actionBackwards_Improvement)
        self.menuCalculate.addAction(self.actionDropping_Filter)
        self.menuHelp.addAction(self.actionWhats_This)
        self.menuHelp.addAction(self.actionManual)
        self.menuApp.addAction(self.actionClose_App)
        self.menuApp.addAction(self.actionSettings)
        self.menuExport_2.addAction(self.actionDropped_Habitat_2)
        self.menuExport_2.addAction(self.actionDropping_Map)
        self.menuExport_2.addAction(self.actionFlow_Map)
        self.menuExport_2.addAction(self.actionVoltage_Layers_Map)
        self.menuExport_2.addAction(self.actionVoltage_Map)
        self.menuExport_2.addAction(self.actionHabitat_Map)
        self.menuExport_2.addAction(self.actionSource_Map)
        self.menuExport_2.addAction(self.actionSink_Map)
        self.menuExport_2.addSeparator()
        self.menuExport_2.addAction(self.actionProject_Data)
        self.menuExport_2.addAction(self.actionScenario_Data)
        self.menuExport_2.addAction(self.actionDropping_Data)
        self.menuEdit.addAction(self.actionPoint)
        self.menubar.addAction(self.menuApp.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuCalculate.menuAction())
        self.menubar.addAction(self.menuExport_2.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar_2.addAction(self.actionView_Map)
        self.toolBar_2.addAction(self.actionView_Voltage)
        self.toolBar_2.addAction(self.actionView_Power)
        self.toolBar_2.addAction(self.actionView_Population)
        self.toolBar_2.addAction(self.actionComparison_View)
        self.toolBar_2.addAction(self.actionDropping_View)
        self.toolBar_2.addSeparator()
        self.toolBar_2.addAction(self.actionSmoothing)
        self.toolBar_2.addAction(self.actionToggle_Navbar)
        self.toolBar_2.addAction(self.actionToggle_Sidebar)
        self.toolBar_2.addAction(self.actionToggle_Subplots)
        self.toolBar_2.addSeparator()
        self.toolBar_3.addAction(self.actionConductance)
        self.toolBar_3.addAction(self.actionCalc_Power)
        self.toolBar_3.addAction(self.actionCalculate_Metrics)
        self.toolBar_3.addAction(self.actionForward_Optimise)
        self.toolBar_3.addAction(self.actionBackwards_Improvement)
        self.toolBar_3.addAction(self.actionDropping_Filter)
        self.toolBar.addAction(self.actionNew)
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addAction(self.actionClose)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionOpen_Habitat)
        self.toolBar.addAction(self.actionAdd_Source_Sink)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionDuplicate_Scenario)
        self.toolBar.addAction(self.actionDelete_From_Scenarios)
        self.toolBar.addAction(self.actionRename_Scenario)
        self.toolBar.addSeparator()
        self.toolBar_4.addAction(self.actionWhats_This)
        self.toolBar_4.addAction(self.actionManual)
        self.toolBar_4.addAction(self.actionSettings)
        self.toolBar_5.addAction(self.actionPoint)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "Condatis", None))
        self.mainfig.setToolTip(_translate("MainWindow", "Main map window", None))
        self.mainfig.setStatusTip(_translate("MainWindow", "Main map window.", None))
        self.menuFile.setTitle(_translate("MainWindow", "&Project", None))
        self.menuView.setTitle(_translate("MainWindow", "&View", None))
        self.menuComponents.setTitle(_translate("MainWindow", "Components", None))
        self.menuCalculate.setTitle(_translate("MainWindow", "&Analysis", None))
        self.menuHelp.setTitle(_translate("MainWindow", "Help", None))
        self.menuApp.setTitle(_translate("MainWindow", "App", None))
        self.menuExport_2.setTitle(_translate("MainWindow", "Export", None))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit", None))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2", None))
        self.toolBar_2.setToolTip(_translate("MainWindow", "View toolbar", None))
        self.toolBar_2.setStatusTip(_translate("MainWindow", "View the data in different ways to see the habitat, flow, bottlenecks etc.", None))
        self.toolBar_3.setWindowTitle(_translate("MainWindow", "toolBar_3", None))
        self.toolBar_3.setToolTip(_translate("MainWindow", "Analysis toolbar", None))
        self.toolBar_3.setStatusTip(_translate("MainWindow", "Tools to run calculations on the landscape data.", None))
        self.dockWidget.setWindowTitle(_translate("MainWindow", "Scenarios and Information/Parameters Panel", None))
        self.label.setText(_translate("MainWindow", "Scenario List", None))
        self.listWidget.setToolTip(_translate("MainWindow", "Scenario List", None))
        self.listWidget.setStatusTip(_translate("MainWindow", "Each scenario consists of a map of habitat, source / sink and kernel parameters. You can select between scenarios here.", None))
        self.tabWidget.setStatusTip(_translate("MainWindow", "Information and parameters panel. Displays map layer parameters and solution and used to input kernel and plot parameters.", None))
        self.label_12.setText(_translate("MainWindow", "E/W Cell Size", None))
        self.label_17.setText(_translate("MainWindow", "N/S Cell Size", None))
        self.originYSpinBox.setStatusTip(_translate("MainWindow", "North / South origin of the coordinate system, taken from the GIS layer metadata.", None))
        self.label_13.setText(_translate("MainWindow", "Habitat Area", None))
        self.label_14.setText(_translate("MainWindow", "Number of Cells", None))
        self.originXSpinBox.setStatusTip(_translate("MainWindow", "East / West origin of the coordinate system, taken from the GIS layer metadata.", None))
        self.hGridSizeSpinBox.setStatusTip(_translate("MainWindow", "The horizontal grid size of the current GIS habitat layer", None))
        self.cellSizeYSpinBox.setStatusTip(_translate("MainWindow", "The size of a cell in the North / South direction.", None))
        self.label_15.setText(_translate("MainWindow", "E/W Raster Size", None))
        self.label_16.setText(_translate("MainWindow", "N/S Raster Size", None))
        self.label_23.setText(_translate("MainWindow", "Origin E/W", None))
        self.vGridSizeSpinBox.setStatusTip(_translate("MainWindow", "The vertical grid size of the current GIS habitat layer", None))
        self.habitatAreaSpinBox.setStatusTip(_translate("MainWindow", "The total area of the habitat in km squared.", None))
        self.label_8.setText(_translate("MainWindow", "Origin N/S", None))
        self.nCellsSpinBox.setStatusTip(_translate("MainWindow", "Displays the number of cells in the landscape that contain some habitat.", None))
        self.cellSizeXSpinBox.setStatusTip(_translate("MainWindow", "The size of a cell in the East / West direction. ", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Map", None))
        self.groupBox.setTitle(_translate("MainWindow", "Kernel", None))
        self.dispersalSpinBox.setStatusTip(_translate("MainWindow", "The species dispersal parameter in km.", None))
        self.dispersalSpinBox.setSuffix(_translate("MainWindow", " km", None))
        self.label_2.setText(_translate("MainWindow", "Dispersal", None))
        self.rSpinBox.setStatusTip(_translate("MainWindow", "Rate of reproduction", None))
        self.label_3.setText(_translate("MainWindow", "R            ", None))
        self.groupBox_2.setTitle(_translate("MainWindow", "Power Plots", None))
        self.cumPowerSpinBox.setStatusTip(_translate("MainWindow", "The bottlenecks threshold controls the number of bottlenecks drawn on the map. Reducing the threshold has the effect of drawing more bottlenecks", None))
        self.cumGoButton.setText(_translate("MainWindow", "Go", None))
        self.label_6.setText(_translate("MainWindow", "Bottlenecks Thresh", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Parameters", None))
        self.label_9.setText(_translate("MainWindow", "Resistance To Extinction", None))
        self.label_10.setText(_translate("MainWindow", "Total Link Strength", None))
        self.label_5.setText(_translate("MainWindow", "Time", None))
        self.label_4.setText(_translate("MainWindow", "Speed", None))
        self.lineEdit_2.setStatusTip(_translate("MainWindow", "The number of steps needed to colonise the target.", None))
        self.lineEdit_4.setStatusTip(_translate("MainWindow", "The combined strength of all the links in the landscape.", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Solution", None))
        self.dockWidget_2.setStatusTip(_translate("MainWindow", "Subplot panel. Click on an individual map or plot to bring it in to the main map area.", None))
        self.dockWidget_2.setWindowTitle(_translate("MainWindow", "Subplots", None))
        self.subfig1.setStatusTip(_translate("MainWindow", "Subplot 1. Click the map to move it to the main plot window.", None))
        self.subfig2.setStatusTip(_translate("MainWindow", "Subplot 2. Click the map to move it to the main plot window.", None))
        self.subfig3.setStatusTip(_translate("MainWindow", "Subplot 3. Click the map to move it to the main plot window.", None))
        self.subfig4.setStatusTip(_translate("MainWindow", "Subplot 4. Click the map to move it to the main plot window.", None))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar", None))
        self.toolBar.setToolTip(_translate("MainWindow", "Project toolbar", None))
        self.toolBar.setStatusTip(_translate("MainWindow", "Project toolbar", None))
        self.toolBar_4.setWindowTitle(_translate("MainWindow", "toolBar_4", None))
        self.toolBar_4.setToolTip(_translate("MainWindow", "Help toolbar", None))
        self.toolBar_4.setStatusTip(_translate("MainWindow", "Open or close the Econet manual.", None))
        self.toolBar_5.setWindowTitle(_translate("MainWindow", "toolBar_5", None))
        self.actionNew.setText(_translate("MainWindow", "New Project", None))
        self.actionNew.setStatusTip(_translate("MainWindow", "Start a new project. ", None))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N", None))
        self.actionOpen.setText(_translate("MainWindow", "&Open Project", None))
        self.actionOpen.setStatusTip(_translate("MainWindow", "Open a project. This must be an HDF5 file with a \'.h5\' extension.", None))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O", None))
        self.actionSave.setText(_translate("MainWindow", "&Save", None))
        self.actionSave.setToolTip(_translate("MainWindow", "Save Project", None))
        self.actionSave.setStatusTip(_translate("MainWindow", "Write any unsaved data to the project file", None))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S", None))
        self.actionSave_As.setText(_translate("MainWindow", "Save As", None))
        self.actionPrint.setText(_translate("MainWindow", "Print", None))
        self.actionPrint.setShortcut(_translate("MainWindow", "Ctrl+P", None))
        self.actionSave_Image.setText(_translate("MainWindow", "Save Image", None))
        self.actionClose.setText(_translate("MainWindow", "Close Project", None))
        self.actionClose.setToolTip(_translate("MainWindow", "Close Project", None))
        self.actionClose.setStatusTip(_translate("MainWindow", "Close the current project", None))
        self.actionView_Map.setText(_translate("MainWindow", "Habitat View", None))
        self.actionView_Map.setStatusTip(_translate("MainWindow", "View the habitat layer and source and sink.", None))
        self.actionView_Map.setShortcut(_translate("MainWindow", "Alt+H", None))
        self.actionView_Voltage.setText(_translate("MainWindow", "Flow View", None))
        self.actionView_Voltage.setToolTip(_translate("MainWindow", "Flow View", None))
        self.actionView_Voltage.setStatusTip(_translate("MainWindow", "View the landscape flow and progress", None))
        self.actionView_Voltage.setShortcut(_translate("MainWindow", "Alt+V", None))
        self.actionView_Power.setText(_translate("MainWindow", "Bottlenecks View", None))
        self.actionView_Power.setToolTip(_translate("MainWindow", "Bottlenecks View", None))
        self.actionView_Power.setStatusTip(_translate("MainWindow", "View  the landscape bottlenecks", None))
        self.actionView_Power.setShortcut(_translate("MainWindow", "Alt+P", None))
        self.actionConductance.setText(_translate("MainWindow", "Calculate Speed", None))
        self.actionConductance.setToolTip(_translate("MainWindow", "Calculate Speed and Flow", None))
        self.actionConductance.setStatusTip(_translate("MainWindow", "Calculate the landscape speed and flow. You must have a habitat and source and sink defined.", None))
        self.actionConductance.setShortcut(_translate("MainWindow", "Ctrl+K", None))
        self.actionForward_Optimise.setText(_translate("MainWindow", "Forward Optimise", None))
        self.actionForward_Optimise.setStatusTip(_translate("MainWindow", "Forward optimisation. Not implemented yet.", None))
        self.actionBackwards_Improvement.setText(_translate("MainWindow", "Backwards Optimise", None))
        self.actionBackwards_Improvement.setStatusTip(_translate("MainWindow", "Backward optimisation. Optimise a new layer by dropping cells.", None))
        self.actionViability.setText(_translate("MainWindow", "Viability", None))
        self.actionShow_subplots.setText(_translate("MainWindow", "Show subplots", None))
        self.actionShow_history_and_controls.setText(_translate("MainWindow", "Show history and controls", None))
        self.actionOpen_Habitat.setText(_translate("MainWindow", "Open Habitat", None))
        self.actionOpen_Habitat.setStatusTip(_translate("MainWindow", "Load a new habitat. This must be a valid GIS raster layer. A new scenario will be created.", None))
        self.actionShow_Plot_navigation_bar.setText(_translate("MainWindow", "Show Nav Bar", None))
        self.actionShow_Plot_navigation_bar.setShortcut(_translate("MainWindow", "Ctrl++", None))
        self.actionHide_plot_navigation_bar.setText(_translate("MainWindow", "Hide Nav Bar", None))
        self.actionHide_plot_navigation_bar.setShortcut(_translate("MainWindow", "Ctrl+-", None))
        self.actionDuplicate_Scenario.setText(_translate("MainWindow", "Duplicate Scenario", None))
        self.actionDuplicate_Scenario.setStatusTip(_translate("MainWindow", "Duplicate the current scenario. This may take some time if the scenario is large", None))
        self.actionDelete_From_Scenarios.setText(_translate("MainWindow", "Delete Scenario", None))
        self.actionDelete_From_Scenarios.setStatusTip(_translate("MainWindow", "Delete the current scenario from the project. Note: The last scenario cannot be deleted. ", None))
        self.actionAdd_Source_Sink.setText(_translate("MainWindow", "Add Source / Target", None))
        self.actionAdd_Source_Sink.setToolTip(_translate("MainWindow", "Add Source / Target", None))
        self.actionAdd_Source_Sink.setStatusTip(_translate("MainWindow", "Add source and sink, either from files or generate automatically.", None))
        self.actionAdd_Source_Sink.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt; font-weight:600;\">Source and Sink Dialog</span></p><p>The Econet software requires source and sink habitat patches to be defined. The source patch is a habitat area already populated by the species of interest and the sink is the target patch that we are aiming to populate. In circuit theory we define the source as having a Voltage of 1 and the sink with a Voltage of 0. There are two methods of defining the source and sink. They can be either loaded from GIS files as a raster image or generated automatically by the software in either Noth/South or East/West directions.</p><p><span style=\" font-size:16pt; font-weight:600;\">Generating the Source and Sink Automatically</span></p><p>Select the \'Auto\' tab in the \'Assign Source Sink\' dialog box, which should be desplayed like the image below. Choose the direction using the radiobuttins on the left. The width of the habitat generated can also be selected. The width is in pixels (habitat cells), so it is determined by the resolution of your habitat raster. The \'Expand Area\' option determines whether the new habitat will be placed within the bounds of the original raster (at the edges) or if the habitat area is to be expanded.<br/><br/><img src=\":/Images/ssinkauto.tiff\"/></p><p><span style=\" font-size:16pt; font-weight:600;\">Generating the Source and Sink From Files</span></p><p><span style=\" font-size:12pt;\">To import the source and sink from a GIS raster file, select the \'From File\' tab and use the \'Find\' button to locate your raster file. A standard file open box will open so that you can find your file. The raster file must contain cells with the source and sink having specific values. By default these are \'1\' for source and \'2\' for sink, but these default values can be changed with the spin boxes.</span></p><p><img src=\":/Images/ssinkfiles.tiff\"/></p></body></html>", None))
        self.actionComparison_View.setText(_translate("MainWindow", "Comparison View", None))
        self.actionComparison_View.setToolTip(_translate("MainWindow", "Comparison View", None))
        self.actionComparison_View.setStatusTip(_translate("MainWindow", "View plots that combine the results from all the scenarios.", None))
        self.actionCalculate_All.setText(_translate("MainWindow", "Calculate All", None))
        self.actionView_Population.setText(_translate("MainWindow", "Population View", None))
        self.actionView_Population.setStatusTip(_translate("MainWindow", "View the landscape in terms of metapopulation statistics.", None))
        self.actionView_Population.setShortcut(_translate("MainWindow", "Alt+O", None))
        self.actionCalculate_Metrics.setText(_translate("MainWindow", "Calculate Survival", None))
        self.actionCalculate_Metrics.setStatusTip(_translate("MainWindow", "Calculate the landscape metapopulation \'survival\' data", None))
        self.actionScenario_Data.setText(_translate("MainWindow", "Scenario Data", None))
        self.actionProject_Data.setText(_translate("MainWindow", "Project Data", None))
        self.actionCurrent_Map.setText(_translate("MainWindow", "Added Habitat", None))
        self.actionToggle_Navbar.setText(_translate("MainWindow", "Toggle Navbar", None))
        self.actionToggle_Navbar.setStatusTip(_translate("MainWindow", "Show the main map window toolbar. You can use this to zoom and pan the map.", None))
        self.actionToggle_Subplots.setText(_translate("MainWindow", "Toggle Subplots", None))
        self.actionToggle_Subplots.setStatusTip(_translate("MainWindow", "Toggle to show or hide the subplots panel", None))
        self.actionToggle_Sidebar.setText(_translate("MainWindow", "Toggle Sidebar", None))
        self.actionToggle_Sidebar.setStatusTip(_translate("MainWindow", "Toggle to show or hide the scenario list and information panel.", None))
        self.actionSmoothing.setText(_translate("MainWindow", "Smoothing", None))
        self.actionSmoothing.setStatusTip(_translate("MainWindow", "Toggle map smoothing on and off. Smoothing can make the image look less blocky.", None))
        self.actionDropped_Habitat.setText(_translate("MainWindow", "Dropped Habitat", None))
        self.actionAbout.setText(_translate("MainWindow", "About", None))
        self.actionEconets_Help.setText(_translate("MainWindow", "Econets Help", None))
        self.actionCurrent_Tasnk_Help.setText(_translate("MainWindow", "Current Task Help", None))
        self.actionWhats_This.setText(_translate("MainWindow", "What\'s This?", None))
        self.actionWhats_This.setStatusTip(_translate("MainWindow", "Enter \'What\'s This\' mode. The mouse pointer will change and you will be able to click on any control to obtain help on that control.", None))
        self.actionHelp_Browser.setText(_translate("MainWindow", "Manu", None))
        self.actionManual.setText(_translate("MainWindow", "Manual", None))
        self.actionManual.setStatusTip(_translate("MainWindow", "Open the manual for the software", None))
        self.actionRename_Scenario.setText(_translate("MainWindow", "Rename Scenario", None))
        self.actionRename_Scenario.setStatusTip(_translate("MainWindow", "Rename the current scenario. Econets will ask you for a new name.", None))
        self.actionVoltage_Map.setText(_translate("MainWindow", "Progress Map", None))
        self.actionVoltage_Map.setStatusTip(_translate("MainWindow", "Export the progress map as a GIS layer", None))
        self.actionVoltage_Layers_Map.setText(_translate("MainWindow", "Isolated Areas Map", None))
        self.actionVoltage_Layers_Map.setStatusTip(_translate("MainWindow", "Export the isolated areas map as a GIS layer", None))
        self.actionCurrent_Map_2.setText(_translate("MainWindow", "Current Map", None))
        self.actionFlow_Map.setText(_translate("MainWindow", "Flow Map", None))
        self.actionFlow_Map.setStatusTip(_translate("MainWindow", "Export the flow map as a GIS layer", None))
        self.actionCalc_Power.setText(_translate("MainWindow", "Calculate Bottlenecks", None))
        self.actionCalc_Power.setStatusTip(_translate("MainWindow", "Calculate the bottlenecks in the landscape to see where new habitat should be created", None))
        self.actionDropping_Filter.setText(_translate("MainWindow", "Dropping Filter", None))
        self.actionDropping_Filter.setStatusTip(_translate("MainWindow", "Open a new window to filter the results of the dropping algorithm in order if their contribution to flow.", None))
        self.actionDropping_View.setText(_translate("MainWindow", "Dropping View", None))
        self.actionDropping_View.setStatusTip(_translate("MainWindow", "Show the results of the dropping algorithm", None))
        self.actionDropped_Habitat_2.setText(_translate("MainWindow", "Dropping Filtered Habitat Map", None))
        self.actionDropped_Habitat_2.setToolTip(_translate("MainWindow", "Export Dropped Habitat", None))
        self.actionDropped_Habitat_2.setStatusTip(_translate("MainWindow", "Export the filtered results of the dropping algorithm as a GIS mask.", None))
        self.actionDropping_Map.setText(_translate("MainWindow", "Dropping Rank Map", None))
        self.actionDropping_Map.setStatusTip(_translate("MainWindow", "Export a GIS layer containing new habitat ranked by the dropping algorithm", None))
        self.actionClose_2.setText(_translate("MainWindow", "Close", None))
        self.actionClose_App.setText(_translate("MainWindow", "Close App", None))
        self.actionClose_App.setStatusTip(_translate("MainWindow", "Close econets", None))
        self.actionSettings.setText(_translate("MainWindow", "Settings", None))
        self.actionSettings.setStatusTip(_translate("MainWindow", "Alter the software settings", None))
        self.actionSource_Map.setText(_translate("MainWindow", "Source Map", None))
        self.actionSource_Map.setStatusTip(_translate("MainWindow", "Export the source mask as a GIS layer", None))
        self.actionSink_Map.setText(_translate("MainWindow", "Target Map", None))
        self.actionSink_Map.setStatusTip(_translate("MainWindow", "Export the target mask as a GIS layer", None))
        self.actionDropping_Data.setText(_translate("MainWindow", "Dropping Data", None))
        self.actionDropping_Data.setStatusTip(_translate("MainWindow", "Export the results of the dropping algorithm as a text file.", None))
        self.actionPoint.setText(_translate("MainWindow", "Point", None))
        self.actionPoint.setStatusTip(_translate("MainWindow", "Edit points on the habitat map.", None))
        self.actionHabitat_Map.setText(_translate("MainWindow", "Habitat Map", None))

from mplwidget import MplWidget, MplSubWidget
import econet_rc

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

